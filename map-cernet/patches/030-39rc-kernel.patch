--- a/modules/ivi_map_tcp.c	2013-10-02 00:13:46.380585264 +0200
+++ b/modules/ivi_map_tcp.c	2013-10-01 23:58:31.924583037 +0200
@@ -801,7 +801,7 @@ void refresh_tcp_map_list(int threshold)
 	spin_lock_bh(&tcp_list.lock);
 	// Iterate all the map_tuple through out_chain only, in_chain contains the same info.
 	for (i = 0; i < IVI_HTABLE_SIZE; i++) {
-		hlist_for_each_entry_safe(iter, loop, temp, &tcp_list.out_chain[i], out_node) {
+		hlist_for_each_entry_safe(iter, loop, &tcp_list.out_chain[i], out_node) {
 			delta = now.tv_sec - iter->StateSetTime.tv_sec;
 			//if (delta >= iter->StateTimeOut || iter->Status == TCP_STATUS_TIME_WAIT || iter->state_seq <= threshold) {
 			if (delta >= iter->StateTimeOut) {				
@@ -825,7 +825,7 @@ void refresh_tcp_map_list(int threshold)
 #endif
 
 				flag = 0; // indicating whether tcp_list.port_num needs to be substracted by 1.
- 				hlist_for_each_entry(i0, l0, &tcp_list.in_chain[port_hashfn(iter->newport)], in_node) {
+ 				hlist_for_each_entry(i0, &tcp_list.in_chain[port_hashfn(iter->newport)], in_node) {
  					if (i0->newport == iter->newport) {
  						flag = 1;
  											
@@ -865,7 +865,7 @@ void free_tcp_map_list(void)
 	// Iterate all the map_tuple through out_chain only, in_chain contains the same info.
 	for (i = 0; i < IVI_HTABLE_SIZE; i++) {
 		if (!hlist_empty(&tcp_list.out_chain[i])) {
-			hlist_for_each_entry_safe(iter, loop, temp, &tcp_list.out_chain[i], out_node) {
+			hlist_for_each_entry_safe(iter, temp, &tcp_list.out_chain[i], out_node) {
 				hlist_del(&iter->out_node);
 				hlist_del(&iter->in_node);
 				hlist_del(&iter->dest_node);
@@ -893,7 +893,7 @@ static inline int tcp_port_in_use(__be16
 
 	hash = port_hashfn(port);
 	if (!hlist_empty(&tcp_list.in_chain[hash])) {
-		hlist_for_each_entry(iter, temp, &tcp_list.in_chain[hash], in_node) {
+		hlist_for_each_entry(iter, &tcp_list.in_chain[hash], in_node) {
 			if (iter->newport == port) {
 				ret = 1;
 				break;
@@ -1043,14 +1043,14 @@ static inline int tcp_dest_multiplex_por
 		
 	for (i = 0; i < 31 && chance > 0; i++) {	
 		if (!hlist_empty(&tcp_list.dest_chain[hash])) {
-			hlist_for_each_entry(multiplex_state, loop0, &tcp_list.dest_chain[hash], dest_node) {
+			hlist_for_each_entry(multiplex_state, &tcp_list.dest_chain[hash], dest_node) {
 				retport = multiplex_state->newport;
 				status = 1;
 					
 				/* don't worry:) we have to check whether this port has been multiplexed by another 
 				   connection with the same destination */
 				if (!hlist_empty(&tcp_list.dest_chain[dsthash])) {
-					hlist_for_each_entry(iter, loop, &tcp_list.dest_chain[dsthash], dest_node) {
+					hlist_for_each_entry(iter, &tcp_list.dest_chain[dsthash], dest_node) {
 						if (iter->dstaddr == dstaddr && iter->dstport == dstp && iter->newport == retport) {
 							status = 0; // this port cannot be multiplexed
 							break;
@@ -1110,7 +1110,7 @@ int get_outflow_tcp_map_port(__be32 olda
 
 	hash = v4addr_port_hashfn(oldaddr, oldp);
 	if (!hlist_empty(&tcp_list.out_chain[hash])) {
-		hlist_for_each_entry_safe(StateContext, loop, temp, &tcp_list.out_chain[hash], out_node) {
+		hlist_for_each_entry_safe(StateContext, temp, &tcp_list.out_chain[hash], out_node) {
 			if (StateContext->oldport == oldp && StateContext->oldaddr == oldaddr) {
 				if (StateContext->dstaddr == dstaddr && StateContext->dstport == dstp) {
 					// Update state context.
@@ -1145,7 +1145,7 @@ int get_outflow_tcp_map_port(__be32 olda
 						tcp_list.size--;
 						flag = 0; // indicating whether tcp_list.port_num needs to be substracted by 1.
 
-						hlist_for_each_entry(i0, l0, &tcp_list.in_chain[port_hashfn(StateContext->newport)], in_node) {
+						hlist_for_each_entry(i0, &tcp_list.in_chain[port_hashfn(StateContext->newport)], in_node) {
 							if (i0->newport == StateContext->newport) {
 								flag = 1;
 								
@@ -1274,7 +1274,7 @@ int get_inflow_tcp_map_port(__be16 newp,
 	*oldaddr = 0;
 	
 	hash = port_hashfn(newp);
-	hlist_for_each_entry_safe(StateContext, loop, temp, &tcp_list.in_chain[hash], in_node) {
+	hlist_for_each_entry_safe(StateContext, temp, &tcp_list.in_chain[hash], in_node) {
 		// Found existing mapping info
 		if (StateContext->newport == newp && StateContext->dstaddr == dstaddr && StateContext->dstport == dstp)
 		{
@@ -1314,7 +1314,7 @@ int get_inflow_tcp_map_port(__be16 newp,
 				tcp_list.size--;
 				
 				flag = 0; // indicating whether tcp_list.port_num needs to be substracted by 1.
- 				hlist_for_each_entry(i0, l0, &tcp_list.in_chain[port_hashfn(StateContext->newport)], in_node) {
+ 				hlist_for_each_entry(i0, &tcp_list.in_chain[port_hashfn(StateContext->newport)], in_node) {
  					if (i0->newport == StateContext->newport) {
  						flag = 1;
  						
--- a/modules/ivi_rule.c	2013-10-02 00:14:39.040586790 +0200
+++ b/modules/ivi_rule.c	2013-10-01 23:53:01.140585667 +0200
@@ -602,7 +602,7 @@ static struct tleaf_info *find_leaf_info
 	if (!l) 
 		return NULL;
 		
-	hlist_for_each_entry(p, temp, &l->head, node) {
+	hlist_for_each_entry(p, &l->head, node) {
 		if (p->plen == plen)
 			return p;
 	}
@@ -619,7 +619,7 @@ static void insert_leaf_info(struct tlea
 	if (hlist_empty(head)) {
 		hlist_add_head(&li->node, head);
 	} else {
-		hlist_for_each_entry(p, temp, head, node) {
+		hlist_for_each_entry(p, head, node) {
 			if (li->plen > p->plen)
 				break;
 
@@ -662,7 +662,7 @@ static int check_leaf(struct tleaf *l, t
 	struct tleaf_info *li;
 	struct hlist_head *head = &l->head;
 	struct hlist_node *temp;
-	hlist_for_each_entry(li, temp, head, node) {
+	hlist_for_each_entry(li, head, node) {
 		if (l->key == (key & li->mask_plen)) {
 			*prefix6 = li->prefix6;
 			if (plen4)
@@ -1071,7 +1071,7 @@ static void trie_flush_leaf(struct tleaf
 	if (!l)
 		return;
 
-	hlist_for_each_entry_safe(li, loop, temp, &l->head, node) {
+	hlist_for_each_entry_safe(li, temp, &l->head, node) {
 		hlist_del(&li->node);
 		tleaf_info_free(li);
 	}
--- a/modules/ivi_map.c	2013-10-02 00:13:38.148608305 +0200
+++ b/modules/ivi_map.c	2013-10-01 23:54:47.356607084 +0200
@@ -85,7 +85,7 @@ static int port_in_use(__be16 port, stru
 
 	hash = port_hashfn(port);
 	if (!hlist_empty(&list->in_chain[hash])) {
-		hlist_for_each_entry(iter, temp, &list->in_chain[hash], in_node) {
+		hlist_for_each_entry(iter, &list->in_chain[hash], in_node) {
 			if (iter->newport == port) {
 				ret = 1;
 				break;
@@ -139,7 +139,7 @@ void refresh_map_list(struct map_list *l
 	spin_lock_bh(&list->lock);
 	// Iterate all the map_tuple through out_chain only, in_chain contains the same info.
 	for (i = 0; i < IVI_HTABLE_SIZE; i++) {
-		hlist_for_each_entry_safe(iter, loop, temp, &list->out_chain[i], out_node) {
+		hlist_for_each_entry_safe(iter, temp, &list->out_chain[i], out_node) {
 			delta = now.tv_sec - iter->timer.tv_sec;
 			if (delta >= list->timeout) {
 #ifdef IVI_DEBUG_MAP
@@ -152,7 +152,7 @@ void refresh_map_list(struct map_list *l
 				list->size--;
 
 				flag = 0; // indicating whether list->port_num needs to be substracted by 1.
- 				hlist_for_each_entry_safe(i0, l0, t0, &list->in_chain[port_hashfn(iter->newport)], in_node) {
+ 				hlist_for_each_entry_safe(i0, t0, &list->in_chain[port_hashfn(iter->newport)], in_node) {
  					if (i0->newport == iter->newport) {
 #ifdef IVI_DEBUG_MAP
  						printk(KERN_INFO "refresh_map_list: newport %d is still used by someone(" NIP4_FMT ":%d -> " NIP4_FMT "). port_num is still %d\n", iter->newport, NIP4(i0->oldaddr), i0->oldport, NIP4(i0->dstaddr), list->port_num);
@@ -186,7 +186,7 @@ void free_map_list(struct map_list *list
 	spin_lock_bh(&list->lock);
 	// Iterate all the map_tuple through out_chain only, in_chain contains the same info.
 	for (i = 0; i < IVI_HTABLE_SIZE; i++) {
-		hlist_for_each_entry_safe(iter, loop, temp, &list->out_chain[i], out_node) {		
+		hlist_for_each_entry_safe(iter, temp, &list->out_chain[i], out_node) {		
 			hlist_del(&iter->out_node);
 			hlist_del(&iter->in_node);
 			hlist_del(&iter->dest_node);
@@ -226,7 +226,7 @@ int get_outflow_map_port(struct map_list
 	
 	hash = v4addr_port_hashfn(oldaddr, oldp);
 	if (!hlist_empty(&list->out_chain[hash])) {
-		hlist_for_each_entry(iter, temp, &list->out_chain[hash], out_node) {
+		hlist_for_each_entry(iter, &list->out_chain[hash], out_node) {
 			if (iter->oldport == oldp && iter->oldaddr == oldaddr) {
 				if (iter->dstaddr == dstaddr) {	
 					retport = iter->newport;
@@ -271,14 +271,14 @@ int get_outflow_map_port(struct map_list
 		
 		for (i = 0; i < 31 && chance > 0; i++) {		
 			if (!hlist_empty(&list->dest_chain[hash])) {
-				hlist_for_each_entry_safe(multiplex_state, loop0, temp0, &list->dest_chain[hash], dest_node) {
+				hlist_for_each_entry_safe(multiplex_state, temp0, &list->dest_chain[hash], dest_node) {
 					retport = multiplex_state->newport;
 					status = 1;
 					
 					/* don't worry:) we have to check whether this port has been multiplexed by another 
 					   connection with the same destination */
 					if (!hlist_empty(&list->dest_chain[dsthash])) {
-						hlist_for_each_entry_safe(iter, loop, temp, &list->dest_chain[dsthash], dest_node) {
+						hlist_for_each_entry_safe(iter, temp, &list->dest_chain[dsthash], dest_node) {
 							if (iter->dstaddr == dstaddr && iter->newport == retport) {
 								status = 0; // this port cannot be multiplexed
 								break;
@@ -403,7 +403,7 @@ int get_inflow_map_port(struct map_list
 	*oldaddr = 0;
 	
 	hash = port_hashfn(newp);
-	hlist_for_each_entry(iter, temp, &list->in_chain[hash], in_node) {
+	hlist_for_each_entry(iter, &list->in_chain[hash], in_node) {
 		if (iter->newport == newp && iter->dstaddr == dstaddr) {
 			*oldaddr = iter->oldaddr;
 			*oldp = iter->oldport;
